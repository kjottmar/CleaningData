m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
cachemean(a)
a$get()
a$setmean(0)
a$getmean()
a$get()
cachemean(a)
a <- makeVector(c(5,25,125,625))
a$get
a$get()
cachemean(a)
cachemean(a)
crazy <- function() {
x <- 3.14
print(x)
{ print(x); x <<- 42; print(x)}
print(x)
}
x <- 0
x
crazy()
x
crazy <- function() {
x <- 3.14
print(x)
{ print(x); x <- 42; print(x)}
print(x)
}
x <- 0
x
crazy()
x
crazy <- function() {
x <<- 3.14
print(x)
{ print(x); x <- 42; print(x)}
print(x)
}
x <- 0
x
crazy()
x
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
mat <- matrix(1:4, 2,2)
mat
solve(mat)
matrixObject <- makeCacheMatrix(mat)
cacheSolve(matrixObject)
cacheSolve(matrixObject)
x
x <- NULL
x
mat
matrixObject <- makeCacheMatrix(mat)
matrixObject
cacheSolve(matrixObject)
x
y
inverse
cacheSolve
cacheSolve()
makeCacheMatrix <- function(x = matrix()) {
##      inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
mat <- matrix(1:4,2,2)
solve(mat)
matrixObject <- makeCacheMatrix(mat)
cacheSolve(matrixObject)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
#setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
mat <- matrix(1:4,2,2)
solve(mat)
matrixObject <- makeCacheMatrix(mat)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
#setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
#setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
matrixObject <- makeCacheMatrix(mat)
cacheSolve(matrixObject)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
#get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, #get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
matrixObject <- makeCacheMatrix(mat)
cacheSolve(matrixObject)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
#set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(#set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
matrixObject <- makeCacheMatrix(mat)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
#set <- function(y) {
#x <<- y
#inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(#set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
matrixObject <- makeCacheMatrix(mat)
cacheSolve(matrixObject)
inverse
## These two functions take a matrix, cache it, compute
## the inverse, and then return that value.
## This function takes a matrix and places it into
## a cached space for subsequent computations.
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function takes a matrix that has been cached
## and computes the inverse of that matrix. It then
## returns that computed inverse matrix.
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
}
mat <- matrix(1:9,3,3)
mat
solve(mat)
solve(mat)
mat <- matrix(1:4,2,2)
mat
solve(mat)
mat <- matrix(10:18,3,3)
mat
solve(mat)
mat <- matrix(c(1,3,5,7,9,11,13,15,17))
mat
mat <- matrix(c(1,3,5,7,9,11,13,15,17),3,3
)
mat
solve(mat)
mat <- matrix(3:8,2,2)
mat
solve(mat)
matrixObject <- makeCacheMatrix(mat)
matrixObject
cacheSolve(matrixObject)
matrick <- matrix(53:12,3,3)
matrick
solve(matrick)
system.time({
n <- 1000
r <- numeric(n)
for (i in 1:n) {
x <- rnorm(n)
r[i] <- mean(x)
}
})
Rprof()
summaryRprof()
$by.total
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a+b)
}
}
set.seed(1); normals <- rnorm(100,1,2)
normals
nLL <- make.NegLogLik(normals)
nLL
ls(environment(nLL))
optim(c(mu = 0, sigma = 1), nLL)$par
nLL <- make.NegLogLik(normals, c(FALSE,2))
optimize(nLL, c(-1,3))$minimum
nLl <- make.NegLogLik(normals, c(1,FALSE))
optimize(nLL, c(0,10))$minimum
nLL <- make.NegLogLik(normals, c(1,FALSE))
optimize(nLL, c(0,10))$minimum
x <- seq(1.7, 1.9, len = 100)
y <- sapply(x,nLL)
plot(x, exp(-(y-min(y))), type = "1")
plot(x, exp(-(y-min(y))), type = "l")
nLL <- make.NegLogLik(normals, c(FALSE,2))
x <- seq(0.5,1.5, len = 100)
y <- sapply(x,nLL)
plot(x, exp(-(y - min(y))), type = "l")
library(xlsx)
install.packages(xlsx_0.5.7)
install.packages(xlsx_0.5.7.tgz)
install.packages("xlsx_0.5.7.tgz")
install.packages("xlsx_0.5.0.tar.gz")
library(xlsx)
install.packages("rJava_0.9-6.tgz",)
install.packages("rJava_0.9-6.tgz", repos = NULL)
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(packate = lubridate)
help(package = lubridate)
today()
this_day <- today()
print(this_day)
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(20081985)
dmy(25081985)
ymd("192012")
ymd(19/20/12)
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment)
this_moment <- update(this_moment, now())
this_moment <- update(this_moment, hours = 19, minutes = 32, seconds = 0)
this_moment
nyc <- now(,"America/New_York")
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + (15 hours 50 minutes)
arrive <- depart + 15 hours + 50 minutes
arrive <- depart + hours(15) + minutes (50)
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
setwd("~/datasciencecoursera/03 Cleaning Data")
?write.table
## This script will take two separate data files (Test and Train) and combine them
## into a single data set.
library(plyr)
## This first step creates a vector with all of the names of the variables from the
## Test and Train data sets
Features <- read.table("features.txt", header=FALSE,
colClasses = c("NULL", "character"))
Variables <- as.matrix(Features, "character")
## This next step creates a vector containing the names of the activities.
ActivityLabels <- read.table("activity_labels.txt", header=FALSE,
colClasses = c("NULL", "character"))
Activities <- as.matrix(ActivityLabels, "character")
## These next steps read the data from the three different Test files. The
## for loop converts the activity number to its description.
TestPersonID <- read.table("test/subject_test.txt", header=FALSE,
col.names="PersonID")
TestData <- read.table("test/X_test.txt", header=FALSE,
col.names=Variables)
TestActivity <- read.table("test/Y_test.txt", header=FALSE,
col.names="Activity")
TestActivity2 <- as.matrix(TestActivity)
for(i in seq_along(TestActivity2)) {
Value <- TestActivity2[i]
Test <- Activities[Value]
TestActivity[i,] <- Test
}
## TestLabel is a vector that will identify the data as being part of the test
## group. The Test Data is grouped together with a column bind.
TestLabel <- matrix("Test",nrow=2947, ncol=1, dimnames = list(c(),c("Test/Train")))
TestTotal <- cbind(TestPersonID, TestActivity, TestLabel,TestData)
## These next steps read the data from the three different Train files. The
## for loop converts the activity number to its description.
TrainPersonID <- read.table("train/subject_train.txt", header=FALSE,
col.names="PersonID")
TrainData <- read.table("train/X_train.txt", header=FALSE,
col.names=Variables)
TrainActivity <- read.table("train/Y_train.txt", header=FALSE,
col.names="Activity")
TrainActivity2 <- as.matrix(TrainActivity)
for(i in seq_along(TrainActivity2)) {
Value <- TrainActivity2[i]
Train <- Activities[Value]
TrainActivity[i,] <- Train
}
## TrainLabel is a vector that will identify the data as being part of the test
## group. The Train Data is grouped together with a column bind.
TrainLabel <- matrix("Train",nrow=7352, ncol=1,dimnames = list(c(),c("Test/Train")))
TrainTotal <- cbind(TrainPersonID, TrainActivity, TrainLabel, TrainData)
## The two sets of data are combined with a row bind.
CombinedData <- rbind(TestTotal,TrainTotal)
MeansSDs <- c(1:6,41:46,81:86,121:126,161:166,201,202,214,215,
227,228,240,241,253,254,266:271,294:296,345:350,
373:375,424:429,452:454,503,504,513,516,517,526,
529,530,539,542,543,552,555:561)
RefinedData <- CombinedData[c(1:3,MeansSDs+3)]
write.table(RefinedData, file="tidyData.txt", row.name=FALSE)
